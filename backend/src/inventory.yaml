openapi: 3.0.4
info:
  title: Inventory Service API
  description: API for managing product inventory, restocking, and analytics. Hi!
  contact:
    email: yakinew@yahoo.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.2
tags:
  - name: General
    description: General information about the service
  - name: Products
    description: Manege products
  - name: Restocking
    description: Manege orders and restocking
  - name: Analytics
    description: Analytics Tools
  - name: Users
    description: Operations about user
paths:
  /health:
    get:
      operationId: controllers.general.health_status
      summary: Health status
      tags:
        - General
      responses:
        '200':
          description: Health status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
  /api/products:
    get:
      operationId: controllers.products.product_get_all
      summary: Get a list of all products with stock levels
      tags:
        - Products
      #      security: # ADDED security for this endpoint
      #        - basicAuth: [ ]
      responses:
        '200':
          description: List of products retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductResponse'
    post:
      operationId: controllers.products.product_create
      summary: Add a new product
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreateRequest'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          description: Bad request (e.g., invalid input, duplicate SKU)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/products/{product_id}:
    get:
      operationId: controllers.products.product_get_by_id
      summary: Get details of a specific product
      tags:
        - Products
      parameters:
        - name: product_id
          in: path
          required: true
          description: ID of the product to retrieve
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Product details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      operationId: controllers.products.product_update
      summary: Update product details or stock level
      tags:
        - Products
      parameters:
        - name: product_id
          in: path
          required: true
          description: ID of the product to update
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdateRequest'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          description: Bad request (e.g., invalid input)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      operationId: controllers.products.product_delete
      summary: Delete a product from the inventory
      tags:
        - Products
      parameters:
        - name: product_id
          in: path
          required: true
          description: ID of the product to delete
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/products/{product_id}/restock:
    post:
      operationId: controllers.restock.product_restock
      summary: Restock a specific product
      tags:
        - Restocking
      parameters:
        - name: product_id
          in: path
          required: true
          description: ID of the product to restock
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestockRequest'
      responses:
        '200':
          description: Product restocked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          description: Bad request (e.g., invalid quantity)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/restocks:
    get:
      operationId: controllers.restock.get_restock_history
      summary: Get a history of restocking logs
      tags:
        - Restocking
      responses:
        '200':
          description: Restocking history retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RestockLogResponse'
  /api/products/low-stock:
    get:
      operationId: controllers.analytics.get_low_stock_products
      summary: Get a list of products with stock below a defined threshold
      tags:
        - Analytics
      responses:
        '200':
          description: Low stock products retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LowStockProductResponse'
  /api/products/analytics:
    get:
      operationId: controllers.analytics.get_stock_trend_data
      summary: Fetch stock trend data for dashboard visualization
      tags:
        - Analytics
      responses:
        '200':
          description: Stock trend data retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StockTrendDataResponse'
  /api/users:
    get:
      operationId: controllers.users.user_get_all
      summary: Get users list
      tags:
        - Users
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
    post:
      operationId: controllers.users.user_create
      summary: Create a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad request (e.g., invalid input)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/users/{id}:
    get:
      operationId: controllers.users.user_get_by_id
      summary: Get user details
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to retrieve
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      operationId: controllers.users.user_update
      summary: Update user
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to update
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad request (e.g., invalid input)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      operationId: controllers.users.user_delete
      summary: Delete user
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to update
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  #  securitySchemes: # Added security schemes
  #    basicAuth:
  #      type: http
  #      scheme: basic
  #      x-basicInfoFunc: 'security.password_validation.validate_password'
  #    oAuth2Implicit:
  #      type: oauth2
  #      flows:
  #        implicit:
  #          authorizationUrl: "https://example.com/oauth/authorize" # Replace with your auth URL
  #          scopes:
  #            read: Grants read access
  #            write: Grants write access
  #            admin: Grants admin access
  #      x-tokenInfoFunc: 'security.token_validator.validate_oauth2_token'
  schemas:
    HealthResponse:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          example: "ok"
    ProductCreateRequest:
      type: object
      required:
        - name
        - sku
        - quantity
        - price
      properties:
        name:
          type: string
          minLength: 1
          example: "Laptop Pro"
        sku:
          type: string
          minLength: 1
          example: "LP-2023-XYZ"
        description:
          type: string
          example: "High-performance laptop for professionals."
        quantity:
          type: integer
          minimum: 0
          example: 100
        price:
          type: number
          format: float
          minimum: 0
          example: 1200.50
    ProductUpdateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          example: "Laptop Pro Max"
        description:
          type: string
          example: "Updated high-performance laptop for demanding professionals."
        quantity:
          type: integer
          minimum: 0
          example: 95
        price:
          type: number
          format: float
          minimum: 0
          example: 1250.00
    ProductResponse:
      type: object
      required:
        - uuid
        - name
        - sku
        - quantity
        - price
      properties:
        uuid:
          type: string
          format: uuid
          example: "caaa8bd8-c450-48d5-9118-2d359ed16bcc"
        name:
          type: string
          example: "Laptop Pro"
        sku:
          type: string
          example: "LP-2023-XYZ"
        description:
          type: string
          example: "High-performance laptop for professionals."
        quantity:
          type: integer
          example: 95
        price:
          type: number
          format: float
          example: 1200.50
        created_at:
          type: string
          format: date-time
          example: "2024-01-01T10:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-05T15:30:00Z"
    RestockRequest:
      type: object
      required:
        - quantity
      properties:
        quantity:
          type: integer
          minimum: 1
          example: 50
        reason:
          type: string
          example: "New shipment received"
    RestockLogResponse:
      type: object
      required:
        - id
        - product_id
        - quantity
        - restocked_at
      properties:
        id:
          type: integer
          format: int64
          example: 101
        product_id:
          type: integer
          format: int64
          example: 1
        quantity:
          type: integer
          example: 50
        restocked_at:
          type: string
          format: date-time
          example: "2024-01-05T15:30:00Z"
        reason:
          type: string
          example: "New shipment received"
    LowStockProductResponse:
      type: object
      required:
        - id
        - uuid
        - name
        - sku
        - quantity
        - threshold
      properties:
        id:
          type: integer
          format: int64
          example: 2
        uuid:
          type: string
          format: uuid
          example: "caaa8bd8-c450-48d5-9118-2d359ed16bcc"
        name:
          type: string
          example: "Wireless Mouse"
        sku:
          type: string
          example: "WM-456"
        quantity:
          type: integer
          example: 15
        threshold:
          type: integer
          example: 20
    StockTrendDataResponse:
      type: object
      required:
        - product_id
        - product_name
        - data
      properties:
        product_id:
          type: integer
          format: int64
          example: 1
        product_name:
          type: string
          example: "Laptop Pro"
        data:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date-time
                example: "2024-01-01"
              quantity:
                type: integer
                example: 100
    UserCreateRequest:
      type: object
      required:
        - name
        - email
      properties:
        uuid:
          type: string
          format: uuid
          example: "caaa8bd8-c450-48d5-9118-2d359ed16bcc"
        name:
          type: string
          minLength: 1
          example: "John Doe"
        email:
          type: string
          format: email
          minLength: 5
          example: "john.doe@example.com"
        phone:
          type: string
          example: "123-456-7890"
    UserUpdateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          example: "John Doe"
        email:
          type: string
          format: email
          minLength: 5
          example: "john.doe@example.com"
        phone:
          type: string
          example: "123-456-7890"
    UserResponse:
      type: object
      required:
        - uuid
        - name
        - email
      properties:
        id:
          type: integer
          format: int64
          example: 123
        uuid:
          type: string
          format: uuid
          example: "caaa8bd8-c450-48d5-9118-2d359ed16bcc"
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        phone:
          type: string
          example: "123-456-7890"
    ErrorResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: "An error occurred"
